(function (factory) {
    if (typeof module === 'object' && typeof module.exports === 'object') {
        var v = factory(require, exports); if (v !== undefined) module.exports = v;
    }
    else if (typeof define === 'function' && define.amd) {
        define(["require", "exports", 'dojo-compose/compose', 'dojo-compose/mixins/createStateful', 'dojo-core/lang', './createCachedRenderMixin', '../util/createCancelableEvent', '../util/lang'], factory);
    }
})(function (require, exports) {
    "use strict";
    var compose_1 = require('dojo-compose/compose');
    var createStateful_1 = require('dojo-compose/mixins/createStateful');
    var lang_1 = require('dojo-core/lang');
    var createCachedRenderMixin_1 = require('./createCachedRenderMixin');
    var createCancelableEvent_1 = require('../util/createCancelableEvent');
    var lang_2 = require('../util/lang');
    var createFormMixin = compose_1.default({
        get value() {
            var formfield = this;
            return lang_2.valueToString(formfield.state.value);
        },
        set value(value) {
            var formfield = this;
            if (value !== formfield.state.value) {
                var event_1 = lang_1.assign(createCancelableEvent_1.default({
                    type: 'valuechange',
                    target: formfield
                }), {
                    oldValue: lang_2.valueToString(formfield.state.value),
                    value: value
                });
                formfield.emit(event_1);
                if (!event_1.defaultPrevented) {
                    formfield.setState({ value: lang_2.stringToValue(event_1.value) });
                }
            }
        }
    }, function (instance, options) {
        if (options) {
            var type = options.type;
            if (type) {
                instance.type = type;
            }
        }
    })
        .mixin({
        mixin: createStateful_1.default,
        initialize: function (instance, options) {
            if (options) {
                var value = options.value;
                if (value) {
                    instance.setState({ value: value });
                }
            }
        }
    })
        .mixin({
        mixin: createCachedRenderMixin_1.default,
        aspectAdvice: {
            before: {
                getNodeAttributes: function () {
                    var args = [];
                    for (var _i = 0; _i < arguments.length; _i++) {
                        args[_i - 0] = arguments[_i];
                    }
                    var formfield = this;
                    var overrides = args[0];
                    if (!overrides) {
                        args[0] = overrides = {};
                    }
                    if (formfield.type) {
                        overrides['type'] = formfield.type;
                    }
                    if (formfield.value) {
                        overrides.value = formfield.value;
                    }
                    if (formfield.state.name) {
                        overrides.name = formfield.state.name;
                    }
                    if (formfield.state.disabled) {
                        overrides['disabled'] = 'disabled';
                    }
                    return args;
                }
            }
        }
    });
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.default = createFormMixin;
});
//# sourceMappingURL=createFormFieldMixin.js.map