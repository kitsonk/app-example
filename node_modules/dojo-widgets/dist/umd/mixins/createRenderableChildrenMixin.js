(function (factory) {
    if (typeof module === 'object' && typeof module.exports === 'object') {
        var v = factory(require, exports); if (v !== undefined) module.exports = v;
    }
    else if (typeof define === 'function' && define.amd) {
        define(["require", "exports", 'dojo-compose/compose'], factory);
    }
})(function (require, exports) {
    "use strict";
    var compose_1 = require('dojo-compose/compose');
    var createRenderableChildrenMixin = compose_1.default({
        getChildrenNodes: function () {
            /* When this gets mixed in, if we had the children as part of the interface, we would end up overwritting what is
             * likely a get accessor for the children, so to protect ourselves, we won't have it part of the interface */
            var renderableChildren = this;
            var results = [];
            /* Converting immutable lists toArray() is expensive */
            renderableChildren.children.forEach(function (child) { return results.push(child.render()); });
            return results;
        }
    });
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.default = createRenderableChildrenMixin;
});
//# sourceMappingURL=createRenderableChildrenMixin.js.map