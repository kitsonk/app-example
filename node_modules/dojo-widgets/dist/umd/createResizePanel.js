(function (factory) {
    if (typeof module === 'object' && typeof module.exports === 'object') {
        var v = factory(require, exports); if (v !== undefined) module.exports = v;
    }
    else if (typeof define === 'function' && define.amd) {
        define(["require", "exports", 'maquette/maquette', 'dojo-compose/mixins/createDestroyable', 'dojo-core/aspect', 'dojo-core/WeakMap', './createWidget', './mixins/createParentMixin', './mixins/createRenderableChildrenMixin'], factory);
    }
})(function (require, exports) {
    "use strict";
    var maquette_1 = require('maquette/maquette');
    var createDestroyable_1 = require('dojo-compose/mixins/createDestroyable');
    var aspect_1 = require('dojo-core/aspect');
    var WeakMap_1 = require('dojo-core/WeakMap');
    var createWidget_1 = require('./createWidget');
    var createParentMixin_1 = require('./mixins/createParentMixin');
    var createRenderableChildrenMixin_1 = require('./mixins/createRenderableChildrenMixin');
    var resizeNodePropertiesMap = new WeakMap_1.default();
    var resizingMap = new WeakMap_1.default();
    function getProjector(resizePanel) {
        var child = resizePanel;
        while (child.parent) {
            child = child.parent;
        }
        return child;
    }
    function setResizeListeners(resizePanel) {
        var onmouseupHandle;
        var onmousemoveHandle;
        var ontouchendHandle;
        var ontouchmoveHandle;
        function onmouseupListener(evt) {
            if (resizingMap.get(resizePanel)) {
                evt.preventDefault();
                resizingMap.delete(resizePanel);
                onmousemoveHandle.destroy();
                onmouseupHandle.destroy();
                resizePanel.invalidate();
                return true;
            }
        }
        function onmousemoveListener(evt) {
            var originalWidth = resizingMap.get(resizePanel);
            if (originalWidth) {
                evt.preventDefault();
                resizePanel.width = String(originalWidth.width + evt.clientX - originalWidth.clientX) + 'px';
                return true;
            }
        }
        function onmousedownListener(evt) {
            if (!resizingMap.get(resizePanel)) {
                var projector = getProjector(resizePanel);
                if (projector && projector.document) {
                    evt.preventDefault();
                    resizingMap.set(resizePanel, { width: parseInt(resizePanel.width, 10), clientX: evt.clientX });
                    onmouseupHandle = aspect_1.on(projector.document, 'onmouseup', onmouseupListener);
                    onmousemoveHandle = aspect_1.on(projector.document, 'onmousemove', onmousemoveListener);
                    resizePanel.invalidate();
                    return true;
                }
            }
        }
        function ontouchendListener(evt) {
            var originalWidth = resizingMap.get(resizePanel);
            if (originalWidth) {
                console.log('ontouchend');
                evt.preventDefault();
                resizingMap.delete(resizePanel);
                ontouchendHandle.destroy();
                ontouchmoveHandle.destroy();
                resizePanel.invalidate();
                return true;
            }
            return false;
        }
        function ontouchmoveListener(evt) {
            var originalWidth = resizingMap.get(resizePanel);
            if (originalWidth && evt.touches.length === 1) {
                console.log('ontouchmove');
                evt.preventDefault();
                resizePanel.width = String(originalWidth.width + evt.touches[0].clientX - originalWidth.clientX) + 'px';
            }
            return false;
        }
        function ontouchstartListener(evt) {
            if (evt.touches.length === 1 && !resizingMap.get(resizePanel)) {
                var projector = getProjector(resizePanel);
                if (projector) {
                    console.log('ontouchstart');
                    evt.preventDefault();
                    resizingMap.set(resizePanel, { width: parseInt(resizePanel.width, 10), clientX: evt.touches[0].clientX });
                    ontouchendHandle = projector.on('touchend', ontouchendListener);
                    ontouchmoveHandle = projector.on('touchmove', ontouchmoveListener);
                    resizePanel.invalidate();
                    return true;
                }
            }
            return false;
        }
        var resizeNodeProperties = resizeNodePropertiesMap.get(resizePanel);
        var onmousedownHandle = aspect_1.on(resizeNodeProperties, 'onmousedown', onmousedownListener);
        var ontouchstartHandle = aspect_1.on(resizeNodeProperties, 'ontouchstart', ontouchstartListener);
        return {
            destroy: function () {
                onmousedownHandle && onmousedownHandle.destroy();
                onmouseupHandle && onmouseupHandle.destroy();
                onmousemoveHandle && onmousemoveHandle.destroy();
                ontouchstartHandle && ontouchstartHandle.destroy();
            }
        };
    }
    var createResizePanel = createWidget_1.default
        .mixin(createParentMixin_1.default)
        .mixin(createRenderableChildrenMixin_1.default)
        .mixin({
        mixin: {
            tagNames: {
                handle: 'dojo-resize-handle'
            },
            get width() {
                var resizePanel = this;
                return resizePanel.state && resizePanel.state && resizePanel.state.width;
            },
            set width(value) {
                var resizePanel = this;
                resizePanel.setState({ width: value });
            }
        },
        aspectAdvice: {
            after: {
                getChildrenNodes: function (result) {
                    var resizePanel = this;
                    result.push(maquette_1.h(resizePanel.tagNames.handle, resizeNodePropertiesMap.get(resizePanel)));
                    return result;
                },
                getNodeAttributes: function (result) {
                    var resizePanel = this;
                    result = result || {};
                    result.styles = result.styles || {};
                    result.styles['width'] = resizePanel.width || '200px';
                    return result;
                }
            }
        }
    })
        .extend({
        tagName: 'dojo-panel-resize'
    })
        .mixin({
        mixin: createDestroyable_1.default,
        initialize: function (instance) {
            resizeNodePropertiesMap.set(instance, {});
            instance.own(setResizeListeners(instance));
        }
    });
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.default = createResizePanel;
});
//# sourceMappingURL=createResizePanel.js.map