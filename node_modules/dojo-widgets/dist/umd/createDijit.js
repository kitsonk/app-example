(function (factory) {
    if (typeof module === 'object' && typeof module.exports === 'object') {
        var v = factory(require, exports); if (v !== undefined) module.exports = v;
    }
    else if (typeof define === 'function' && define.amd) {
        define(["require", "exports", 'maquette/maquette', 'dojo-compose/mixins/createDestroyable', 'dojo-compose/mixins/createEvented', 'dojo-compose/mixins/createStateful', 'dojo-core/Map', 'dojo-core/Promise', 'dojo-core/WeakMap', './mixins/createRenderable'], factory);
    }
})(function (require, exports) {
    "use strict";
    var maquette_1 = require('maquette/maquette');
    var createDestroyable_1 = require('dojo-compose/mixins/createDestroyable');
    var createEvented_1 = require('dojo-compose/mixins/createEvented');
    var createStateful_1 = require('dojo-compose/mixins/createStateful');
    var Map_1 = require('dojo-core/Map');
    var Promise_1 = require('dojo-core/Promise');
    var WeakMap_1 = require('dojo-core/WeakMap');
    var createRenderable_1 = require('./mixins/createRenderable');
    /**
     * Internal function to handle construction of a Dijit
     * @param dijit The instance of the wrapper widget
     * @param srcNodeRef The DOM Node that should be used to pass to the Dijit constructor
     */
    function constructDijitWidget(dijit, srcNodeRef) {
        var dijitData = dijitDataWeakMap.get(dijit);
        return resolveCtor(dijitData.Ctor)
            .then(function (Ctor) {
            var dijitWidget = new Ctor(dijitData.params, srcNodeRef);
            dijitWidget.startup();
            return dijitWidget;
        });
    }
    /**
     * Internal function that handles the management of the DOM Element when the VNode
     * is added to the flow of the real DOM
     * @param element The DOM Element that is being
     */
    function afterCreate(element) {
        var dijit = this;
        var dijitData = dijitDataWeakMap.get(dijit);
        if (dijitData.dijitWidget) {
            element.parentNode.insertBefore(dijitData.dijitWidget.domNode, element);
            element.parentNode.removeChild(element);
        }
        else {
            constructDijitWidget(dijit, element)
                .then(function (dijitWidget) {
                dijitData.dijitWidget = dijitWidget;
            }, function (error) {
                dijit.emit({
                    type: 'error',
                    error: error,
                    target: dijit
                });
            });
        }
    }
    /**
     * A map of already loaded Ctors
     */
    var ctorMap = new Map_1.default();
    /**
     * Intrernal function that handles resolving a Dijit widget contructor, including potentially
     * loading the module, if supplied as a string.
     *
     * Returns a `Promise` which resolves with the constructor.
     * @param Ctor The Dijit widget constructor to be resolved
     */
    function resolveCtor(Ctor) {
        if (typeof Ctor !== 'string') {
            return Promise_1.default.resolve(Ctor);
        }
        else if (ctorMap.has(Ctor)) {
            return Promise_1.default.resolve(ctorMap.get(Ctor));
        }
        else {
            /* TODO: Should we have a map of already resolved MIDs like the Dojo 1 Parser? */
            return new Promise_1.default(function (resolve, reject) {
                var handle = require.on('error', function (error) {
                    handle.remove();
                    reject(error);
                });
                var mid = Ctor;
                require([mid], function (Ctor) {
                    handle.remove();
                    if (Ctor && typeof Ctor === 'function') {
                        ctorMap.set(mid, Ctor);
                        resolve(Ctor);
                    }
                    else {
                        reject(new Error("Failed to load constructor from MID: \"" + Ctor + "\""));
                    }
                });
            });
        }
    }
    /**
     * A weak map for storing the Dijit data structure
     */
    var dijitDataWeakMap = new WeakMap_1.default();
    /**
     * Create a new instance of a Dijit "wrapper" which can integrate a Dijit into the Dojo 2
     * widgeting system.
     */
    var createDijit = createRenderable_1.default
        .mixin(createStateful_1.default)
        .mixin({
        mixin: {
            render: function () {
                var dijit = this;
                var afterCreate = dijitDataWeakMap.get(dijit).afterCreate;
                return maquette_1.h(dijit.tagName, { afterCreate: afterCreate });
            },
            get dijit() {
                var dijit = this;
                return dijitDataWeakMap.get(dijit).dijitWidget;
            },
            get Ctor() {
                var dijit = this;
                return dijitDataWeakMap.get(dijit).Ctor;
            },
            get params() {
                var dijit = this;
                return dijitDataWeakMap.get(dijit).params;
            }
        },
        initialize: function (instance, options) {
            /* initialize the constructor */
            var dijitData = {};
            dijitDataWeakMap.set(instance, dijitData);
            /* create bound version of afterCreate */
            dijitData.afterCreate = afterCreate.bind(instance);
            if (options) {
                dijitData.Ctor = options.Ctor;
                dijitData.params = options.params || {};
            }
        }
    })
        .mixin({
        mixin: createEvented_1.default,
        initialize: function (instance) {
            instance.own(instance.on('statechange', function (event) {
                var _a = event.state, Ctor = _a.Ctor, params = _a.params;
                if (Ctor || params) {
                    var dijitData = dijitDataWeakMap.get(instance);
                    if (!dijitData.dijitWidget) {
                        if (Ctor) {
                            dijitData.Ctor = Ctor;
                        }
                        if (params) {
                            dijitData.params = params;
                        }
                    }
                }
            }));
        }
    })
        .mixin({
        mixin: createDestroyable_1.default,
        initialize: function (instance) {
            instance.own({
                destroy: function () {
                    var dijitData = dijitDataWeakMap.get(instance);
                    if (dijitData.dijitWidget && dijitData.dijitWidget.destroy) {
                        /* TODO: Should we use .destroyRecursive()? */
                        dijitData.dijitWidget.destroy();
                    }
                    dijitDataWeakMap.delete(instance);
                }
            });
        }
    });
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.default = createDijit;
});
//# sourceMappingURL=createDijit.js.map