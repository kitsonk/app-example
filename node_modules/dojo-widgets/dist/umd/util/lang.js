(function (factory) {
    if (typeof module === 'object' && typeof module.exports === 'object') {
        var v = factory(require, exports); if (v !== undefined) module.exports = v;
    }
    else if (typeof define === 'function' && define.amd) {
        define(["require", "exports"], factory);
    }
})(function (require, exports) {
    "use strict";
    function getIndex(list, item, position, reference) {
        var idx;
        if (typeof position === 'number') {
            idx = position;
            var size = Array.isArray(list) ? list.length : list.size;
            if (idx < 0 || idx > size) {
                throw new Error('position is out of range');
            }
        }
        else {
            switch (position) {
                case 'first':
                    idx = 0;
                    break;
                case 'last':
                    idx = Array.isArray(list) ? list.length : list.size;
                    break;
                case 'before':
                    idx = list.indexOf(reference);
                    if (idx === -1) {
                        throw new Error('reference not contained in this list');
                    }
                    break;
                case 'after':
                    idx = list.indexOf(reference) + 1;
                    if (idx === 0) {
                        throw new Error('reference not contained in this list');
                    }
                    break;
                default:
                    throw Error("Invalid position \"" + position + "\"");
            }
        }
        return idx;
    }
    function insertInList(list, item, position, reference) {
        return list.insert(getIndex(list, item, position, reference), item);
    }
    exports.insertInList = insertInList;
    function insertInArray(array, item, position, reference) {
        array.splice(getIndex(array, item, position, reference), 0, item);
        return array;
    }
    exports.insertInArray = insertInArray;
});
//# sourceMappingURL=lang.js.map