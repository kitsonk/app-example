{"version":3,"file":"createRenderableChildrenMixin.js","sourceRoot":"","sources":["createRenderableChildrenMixin.ts"],"names":[],"mappings":";;;;;;;;;IAEA,wBAAwC,sBAAsB,CAAC,CAAA;IAc/D,IAAM,6BAA6B,GAA8B,iBAAO,CAAC;QACxE,gBAAgB;YACf;yHAC6G;YAC7G,IAAM,kBAAkB,GAEpB,IAAI,CAAC;YACT,IAAM,OAAO,GAAuB,EAAE,CAAC;YACvC,uDAAuD;YACvD,kBAAkB,CAAC,QAAQ,CAAC,OAAO,CAAC,UAAC,KAAK,IAAK,OAAA,OAAO,CAAC,IAAI,CAAC,KAAK,CAAC,MAAM,EAAE,CAAC,EAA5B,CAA4B,CAAC,CAAC;YAC7E,MAAM,CAAC,OAAO,CAAC;QAChB,CAAC;KACD,CAAC,CAAC;IAEH;sBAAe,6BAA6B,CAAC","sourcesContent":["import { VNode } from 'maquette/maquette';\nimport { List } from 'immutable/immutable';\nimport compose, { ComposeFactory } from 'dojo-compose/compose';\nimport { Child } from './createParentMixin';\n\nexport interface RenderableChildrenOptions {}\n\nexport interface RenderableChildrenMixin {\n\t/**\n\t * Return an array of VNodes/strings the represent the rendered results of the children of this instance\n\t */\n\tgetChildrenNodes(): (VNode | string)[];\n}\n\nexport interface RenderableChildrenFactory extends ComposeFactory<RenderableChildrenMixin, RenderableChildrenOptions> {}\n\nconst createRenderableChildrenMixin: RenderableChildrenFactory = compose({\n\tgetChildrenNodes(): (VNode | string)[] {\n\t\t/* When this gets mixed in, if we had the children as part of the interface, we would end up overwritting what is\n\t\t * likely a get accessor for the children, so to protect ourselves, we won't have it part of the interface */\n\t\tconst renderableChildren: RenderableChildrenMixin & {\n\t\t\tchildren: List<Child>;\n\t\t} = this;\n\t\tconst results: (VNode | string)[] = [];\n\t\t/* Converting immutable lists toArray() is expensive */\n\t\trenderableChildren.children.forEach((child) => results.push(child.render()));\n\t\treturn results;\n\t}\n});\n\nexport default createRenderableChildrenMixin;\n"]}