{"version":3,"file":"createListMixin.js","sourceRoot":"","sources":["createListMixin.ts"],"names":[],"mappings":";;;;;;;;;IAAA,yBAAyB,mBAAmB,CAAC,CAAA;IAE7C,+BAAiE,oCAAoC,CAAC,CAAA;IAgDtG,IAAM,eAAe,GAAqB,wBAAc;SACtD,KAAK,CAAC;QACN,KAAK,EAAS;YACb,gBAAgB;gBACf,IAAM,IAAI,GAAc,IAAI,CAAC;gBAC7B,EAAE,CAAC,CAAC,IAAI,CAAC,KAAK,IAAI,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC,CAAC;oBACpC,IAAM,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC;oBAC/B,MAAM,CAAC,CAAE,YAAC,CAAC,IAAI,CAAC,QAAQ,CAAC,IAAI,EAAE,KAAK,CAAC,GAAG,CAAC,UAAC,IAAI,IAAK,OAAA,YAAC,CAAC,IAAI,CAAC,QAAQ,CAAC,IAAI,EAAE,EAAE,GAAG,EAAE,IAAI,EAAE,EAAE,CAAE,IAAI,CAAC,KAAK,CAAE,CAAC,EAApD,CAAoD,CAAC,CAAC,CAAE,CAAC;gBAC7G,CAAC;gBACD,MAAM,CAAC,EAAE,CAAC;YACX,CAAC;YAED,QAAQ,EAAE;gBACT,IAAI,EAAE,IAAI;gBACV,IAAI,EAAE,IAAI;aACV;SACD;KACD,CAAC,CAAC;IAEJ;sBAAe,eAAe,CAAC","sourcesContent":["import { h, VNode } from 'maquette/maquette';\nimport { ComposeFactory } from 'dojo-compose/compose';\nimport createStateful, { Stateful, StatefulOptions, State } from 'dojo-compose/mixins/createStateful';\n\nexport interface ListStateItem {\n\t[property: string]: any;\n\tid: string | number;\n\tlabel: string;\n}\n\nexport interface ListMixinState<I extends ListStateItem> extends State {\n\t/**\n\t * Any items that are to be rendered by the list\n\t */\n\titems?: I[];\n}\n\nexport interface TagNames {\n\t/**\n\t * The tag name for the list item\n\t */\n\tlist: string;\n\n\t/**\n\t * The tag name for the list items\n\t */\n\titem: string;\n}\n\nexport interface List {\n\t/**\n\t * A map of tag names to use with the list items\n\t */\n\ttagNames: TagNames;\n\n\t/**\n\t * Return an array of VNodes/strings the represent the rendered results of the list of this instance\n\t */\n\tgetChildrenNodes(): (VNode | string)[];\n}\n\n/**\n * A mixin that provides the functionality to render a list of items that are in its state\n */\nexport type ListMixin = List & Stateful<ListMixinState<ListStateItem>>;\n\nexport interface ListMixinFactory extends ComposeFactory<ListMixin, StatefulOptions<ListMixinState<ListStateItem>>> {\n\t<I extends ListStateItem>(options?: StatefulOptions<ListMixinState<I>>): List;\n}\n\nconst createListMixin: ListMixinFactory = createStateful\n\t.mixin({\n\t\tmixin: <List> {\n\t\t\tgetChildrenNodes(): (VNode | string)[] {\n\t\t\t\tconst list: ListMixin = this;\n\t\t\t\tif (list.state && list.state.items) {\n\t\t\t\t\tconst items = list.state.items;\n\t\t\t\t\treturn [ h(list.tagNames.list, items.map((item) => h(list.tagNames.item, { key: item }, [ item.label ]))) ];\n\t\t\t\t}\n\t\t\t\treturn [];\n\t\t\t},\n\n\t\t\ttagNames: {\n\t\t\t\tlist: 'ul',\n\t\t\t\titem: 'li'\n\t\t\t}\n\t\t}\n\t});\n\nexport default createListMixin;\n"]}