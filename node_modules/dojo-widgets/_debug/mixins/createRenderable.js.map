{"version":3,"file":"createRenderable.js","sourceRoot":"","sources":["createRenderable.ts"],"names":[],"mappings":";;;;;;;;;IAAA,yBAAyB,mBAAmB,CAAC,CAAA;IAC7C,wBAAwC,sBAAsB,CAAC,CAAA;IAC/D,kCAA+C,uCAAuC,CAAC,CAAA;IAoCvF,sBAA6B,KAAU;QACtC,MAAM,CAAC,KAAK,IAAI,OAAO,KAAK,CAAC,MAAM,KAAK,UAAU,CAAC;IACpD,CAAC;IAFe,oBAAY,eAE3B,CAAA;IAED,IAAM,gBAAgB,GAAsB,iBAAO,CAAqC;QACtF,MAAM;YACL,IAAM,UAAU,GAAe,IAAI,CAAC;YACpC,MAAM,CAAC,YAAC,CAAC,UAAU,CAAC,OAAO,CAAC,CAAC;QAC9B,CAAC;QAED,OAAO,EAAE,KAAK;KACd,EAAE,UAAC,QAAQ,EAAE,OAAO;QACpB,EAAE,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC;YACL,6BAAO,EAAE,uBAAM,EAAE,yBAAM,CAAa;YAC5C,QAAQ,CAAC,OAAO,GAAG,OAAO,IAAI,QAAQ,CAAC,OAAO,CAAC;YAC/C,QAAQ,CAAC,MAAM,GAAG,MAAM,IAAI,QAAQ,CAAC,MAAM,CAAC;YAC5C,EAAE,CAAC,CAAC,QAAM,CAAC,CAAC,CAAC;gBACZ,QAAM,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC;YACzB,CAAC;QACF,CAAC;IACF,CAAC,CAAC;SACD,KAAK,CAAC,2BAAiB,CAAC,CAAC;IAE3B;sBAAe,gBAAgB,CAAC","sourcesContent":["import { h, VNode } from 'maquette/maquette';\nimport compose, { ComposeFactory } from 'dojo-compose/compose';\nimport createDestroyable, { Destroyable } from 'dojo-compose/mixins/createDestroyable';\nimport { ParentMixin } from './createParentMixin';\n\nexport interface RenderFunction {\n\t(): VNode;\n}\n\nexport interface RenderableOptions {\n\t/**\n\t * A render function to be used.\n\t */\n\trender?: RenderFunction;\n\n\ttagName?: string;\n\n\tparent?: ParentMixin<any>;\n}\n\nexport interface RenderableMixin {\n\t/**\n\t * Takes no arguments and returns a VNode\n\t */\n\trender(): VNode;\n\n\t/**\n\t * The tag name to be used\n\t */\n\ttagName: string;\n\n\tparent?: ParentMixin<Renderable>;\n}\n\nexport type Renderable = Destroyable & RenderableMixin;\n\nexport interface RenderableFactory extends ComposeFactory<Renderable, RenderableOptions> { }\n\nexport function isRenderable(value: any): value is Renderable {\n\treturn value && typeof value.render === 'function';\n}\n\nconst createRenderable: RenderableFactory = compose<RenderableMixin, RenderableOptions>({\n\t\trender() {\n\t\t\tconst renderable: Renderable = this;\n\t\t\treturn h(renderable.tagName);\n\t\t},\n\n\t\ttagName: 'div'\n\t}, (instance, options) => {\n\t\tif (options) {\n\t\t\tconst { tagName, render, parent } = options;\n\t\t\tinstance.tagName = tagName || instance.tagName;\n\t\t\tinstance.render = render || instance.render;\n\t\t\tif (parent) {\n\t\t\t\tparent.append(instance);\n\t\t\t}\n\t\t}\n\t})\n\t.mixin(createDestroyable);\n\nexport default createRenderable;\n"]}