{"version":3,"file":"createFormFieldMixin.js","sourceRoot":"","sources":["createFormFieldMixin.ts"],"names":[],"mappings":";;;;;;;;;IAEA,+BAAiE,oCAAoC,CAAC,CAAA;IACtG,wCAA8E,2BAA2B,CAAC,CAAA;IAyC1G,IAAM,eAAe,GAAqB,wBAAc;SACtD,KAAK,CAAC,iCAAuB,CAAC;SAC9B,KAAK,CAAC;QACN,KAAK,EAAc;YAClB,IAAI,KAAK;gBACR,IAAM,SAAS,GAAkD,IAAI,CAAC;gBACtE,MAAM,CAAC,SAAS,CAAC,KAAK,CAAC,KAAK,CAAC;YAC9B,CAAC;YAED,IAAI,KAAK,CAAC,KAAa;gBACtB,IAAM,SAAS,GAAkD,IAAI,CAAC;gBACtE,EAAE,CAAC,CAAC,KAAK,KAAK,SAAS,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC,CAAC;oBACrC,SAAS,CAAC,QAAQ,CAAC,EAAE,OAAA,KAAK,EAAE,CAAC,CAAC;gBAC/B,CAAC;YACF,CAAC;SACD;QACD,UAAU,YAAC,QAAmB,EAAE,OAA6D;YAC5F,EAAE,CAAC,CAAC,OAAO,IAAI,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC;gBAC7B,QAAQ,CAAC,IAAI,GAAG,OAAO,CAAC,IAAI,CAAC;YAC9B,CAAC;QACF,CAAC;QACD,YAAY,EAAE;YACb,MAAM,EAAE;gBACP,iBAAiB;oBAAC,cAAc;yBAAd,WAAc,CAAd,sBAAc,CAAd,IAAc;wBAAd,6BAAc;;oBAC/B,IAAM,SAAS,GAAkD,IAAI,CAAC;oBACtE,IAAI,SAAS,GAAoB,IAAI,CAAC,CAAC,CAAC,CAAC;oBAEzC,EAAE,CAAC,CAAC,CAAC,SAAS,CAAC,CAAC,CAAC;wBAChB,IAAI,CAAC,CAAC,CAAC,GAAG,SAAS,GAAG,EAAE,CAAC;oBAC1B,CAAC;oBAED,EAAE,CAAC,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC,CAAC;wBACpB,SAAS,CAAC,MAAM,CAAC,GAAG,SAAS,CAAC,IAAI,CAAC;oBACpC,CAAC;oBACD,EAAE,CAAC,CAAC,SAAS,CAAC,KAAK,CAAC,CAAC,CAAC;wBACrB,SAAS,CAAC,KAAK,GAAG,SAAS,CAAC,KAAK,CAAC;oBACnC,CAAC;oBACD,EAAE,CAAC,CAAC,SAAS,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC,CAAC;wBAC1B,SAAS,CAAC,IAAI,GAAG,SAAS,CAAC,KAAK,CAAC,IAAI,CAAC;oBACvC,CAAC;oBACD,EAAE,CAAC,CAAC,SAAS,CAAC,KAAK,CAAC,QAAQ,CAAC,CAAC,CAAC;wBAC9B,SAAS,CAAC,UAAU,CAAC,GAAG,UAAU,CAAC;oBACpC,CAAC;oBAED,MAAM,CAAC,IAAI,CAAC;gBACb,CAAC;aACD;SACD;KACD,CAAC,CAAC;IAEJ;sBAAe,eAAe,CAAC","sourcesContent":["import { VNodeProperties } from 'maquette/maquette';\nimport { ComposeFactory } from 'dojo-compose/compose';\nimport createStateful, { Stateful, State, StatefulOptions } from 'dojo-compose/mixins/createStateful';\nimport createCachedRenderMixin, { CachedRenderMixin, CachedRenderState } from './createCachedRenderMixin';\n\nexport interface FormFieldMixinOptions<V, S extends FormFieldMixinState<V>> extends StatefulOptions<S> {\n\ttype?: string;\n}\n\nexport interface FormFieldMixinState<V> extends State, CachedRenderState {\n\t/**\n\t * The form widget's name\n\t */\n\tname?: string;\n\n\t/**\n\t * The current value\n\t */\n\tvalue?: V;\n\n\t/**\n\t * Whether the field is currently disabled or not\n\t */\n\tdisabled?: boolean;\n}\n\nexport interface FormField {\n\t/**\n\t * The HTML type for this widget\n\t */\n\ttype?: string;\n\n\t/**\n\t * The string value of this form widget, which is read from the widget state\n\t */\n\tvalue?: string;\n}\n\nexport type FormFieldMixin<V, S extends FormFieldMixinState<V>> = FormField & Stateful<S> & CachedRenderMixin<S>;\n\nexport interface FormMixinFactory extends ComposeFactory<FormFieldMixin<any, FormFieldMixinState<any>>, FormFieldMixinOptions<any, FormFieldMixinState<any>>> {\n\t<V>(options?: FormFieldMixinOptions<V, FormFieldMixinState<V>>): FormFieldMixin<V, FormFieldMixinState<V>>;\n}\n\nconst createFormMixin: FormMixinFactory = createStateful\n\t.mixin(createCachedRenderMixin)\n\t.mixin({\n\t\tmixin: <FormField> {\n\t\t\tget value(): string {\n\t\t\t\tconst formfield: FormFieldMixin<any, FormFieldMixinState<any>> = this;\n\t\t\t\treturn formfield.state.value;\n\t\t\t},\n\n\t\t\tset value(value: string) {\n\t\t\t\tconst formfield: FormFieldMixin<any, FormFieldMixinState<any>> = this;\n\t\t\t\tif (value !== formfield.state.value) {\n\t\t\t\t\tformfield.setState({ value });\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\t\tinitialize(instance: FormField, options: FormFieldMixinOptions<any, FormFieldMixinState<any>>) {\n\t\t\tif (options && options.type) {\n\t\t\t\tinstance.type = options.type;\n\t\t\t}\n\t\t},\n\t\taspectAdvice: {\n\t\t\tbefore: {\n\t\t\t\tgetNodeAttributes(...args: any[]) {\n\t\t\t\t\tconst formfield: FormFieldMixin<any, FormFieldMixinState<any>> = this;\n\t\t\t\t\tlet overrides: VNodeProperties = args[0];\n\n\t\t\t\t\tif (!overrides) {\n\t\t\t\t\t\targs[0] = overrides = {};\n\t\t\t\t\t}\n\n\t\t\t\t\tif (formfield.type) {\n\t\t\t\t\t\toverrides['type'] = formfield.type;\n\t\t\t\t\t}\n\t\t\t\t\tif (formfield.value) {\n\t\t\t\t\t\toverrides.value = formfield.value;\n\t\t\t\t\t}\n\t\t\t\t\tif (formfield.state.name) {\n\t\t\t\t\t\toverrides.name = formfield.state.name;\n\t\t\t\t\t}\n\t\t\t\t\tif (formfield.state.disabled) {\n\t\t\t\t\t\toverrides['disabled'] = 'disabled';\n\t\t\t\t\t}\n\n\t\t\t\t\treturn args;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t});\n\nexport default createFormMixin;\n"]}