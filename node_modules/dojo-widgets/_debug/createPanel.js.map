{"version":3,"file":"createPanel.js","sourceRoot":"","sources":["createPanel.ts"],"names":[],"mappings":";;;;;;;;;IACA,6BAAiE,gBAAgB,CAAC,CAAA;IAClF,qCAAgE,+BAA+B,CAAC,CAAA;IAChG,kCAA0E,4BAA4B,CAAC,CAAA;IACvG,8CAA0C,wCAAwC,CAAC,CAAA;IAYnF,IAAM,WAAW,GAAiB,sBAAY;SAC5C,KAAK,CAAC,8BAAoB,CAAC;SAC3B,KAAK,CAAC,2BAAiB,CAAC;SACxB,KAAK,CAAC,uCAA6B,CAAC;SACpC,MAAM,CAAC;QACP,OAAO,EAAE,YAAY;KACrB,CAAC,CAAC;IAEJ;sBAAe,WAAW,CAAC","sourcesContent":["import { ComposeFactory } from 'dojo-compose/compose';\nimport createWidget, { Widget, WidgetState, WidgetOptions } from './createWidget';\nimport createCloseableMixin, { Closeable, CloseableState } from './mixins/createCloseableMixin';\nimport createParentMixin, { ParentMixin, ParentMixinOptions, Child } from './mixins/createParentMixin';\nimport createRenderableChildrenMixin from './mixins/createRenderableChildrenMixin';\n\nexport interface PanelState extends WidgetState, CloseableState {\n\tlabel?: string;\n}\n\nexport interface PanelOptions extends WidgetOptions<PanelState>, ParentMixinOptions<Child> { }\n\nexport type Panel = Widget<PanelState> & Closeable & ParentMixin<Child>;\n\nexport interface PanelFactory extends ComposeFactory<Panel, PanelOptions> { }\n\nconst createPanel: PanelFactory = createWidget\n\t.mixin(createCloseableMixin)\n\t.mixin(createParentMixin)\n\t.mixin(createRenderableChildrenMixin)\n\t.extend({\n\t\ttagName: 'dojo-panel'\n\t});\n\nexport default createPanel;\n"]}