{"version":3,"file":"createTextInput.js","sourceRoot":"","sources":["createTextInput.ts"],"names":[],"mappings":";;;;;;;;;IACA,6BAAoD,gBAAgB,CAAC,CAAA;IACrE,qCAAiG,+BAA+B,CAAC,CAAA;IAajI,IAAM,eAAe,GAAqB,sBAAY;SACpD,KAAK,CAAC;QACN,KAAK,EAAE,8BAAoB;QAC3B,UAAU,YAAC,QAAQ;YAClB,QAAQ,CAAC,GAAG,CAAC,QAAQ,CAAC,EAAE,CAAC,OAAO,EAAE,UAAC,KAAyC;gBAC3E,QAAQ,CAAC,KAAK,GAAG,KAAK,CAAC,MAAM,CAAC,KAAK,CAAC;YACrC,CAAC,CAAC,CAAC,CAAC;QACL,CAAC;KACD,CAAC;SACD,MAAM,CAAC;QACP,IAAI,EAAE,MAAM;QACZ,OAAO,EAAE,OAAO;KAChB,CAAC,CAAC;IAEJ;sBAAe,eAAe,CAAC","sourcesContent":["import { ComposeFactory } from 'dojo-compose/compose';\nimport createWidget, { Widget, WidgetOptions } from './createWidget';\nimport createFormFieldMixin, { FormFieldMixin, FormFieldMixinState, FormFieldMixinOptions } from './mixins/createFormFieldMixin';\n\n/* I suspect this needs to go somewhere else */\nexport interface TypedTargetEvent<T extends EventTarget> extends Event {\n\ttarget: T;\n}\n\nexport interface TextInputOptions extends WidgetOptions<FormFieldMixinState<string>>, FormFieldMixinOptions<string, FormFieldMixinState<string>> { }\n\nexport type TextInput = Widget<FormFieldMixinState<string>> & FormFieldMixin<string, FormFieldMixinState<string>>;\n\nexport interface TextInputFactory extends ComposeFactory<TextInput, TextInputOptions> { }\n\nconst createTextInput: TextInputFactory = createWidget\n\t.mixin({\n\t\tmixin: createFormFieldMixin,\n\t\tinitialize(instance) {\n\t\t\tinstance.own(instance.on('input', (event: TypedTargetEvent<HTMLInputElement>) => {\n\t\t\t\tinstance.value = event.target.value;\n\t\t\t}));\n\t\t}\n\t})\n\t.extend({\n\t\ttype: 'text',\n\t\ttagName: 'input'\n\t});\n\nexport default createTextInput;\n"]}