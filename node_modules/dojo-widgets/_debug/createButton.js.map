{"version":3,"file":"createButton.js","sourceRoot":"","sources":["createButton.ts"],"names":[],"mappings":";;;;;;;;;IACA,6BAAiE,gBAAgB,CAAC,CAAA;IAClF,qCAAiG,+BAA+B,CAAC,CAAA;IAUjI,IAAM,YAAY,GAAkB,sBAAY;SAC9C,KAAK,CAAC;QACN,KAAK,EAAE,8BAAoB;KAC3B,CAAC;SACD,MAAM,CAAC;QACP,OAAO,EAAE,QAAQ;QACjB,IAAI,EAAE,QAAQ;KACd,CAAC,CAAC;IAEJ;sBAAe,YAAY,CAAC","sourcesContent":["import { ComposeFactory } from 'dojo-compose/compose';\nimport createWidget, { Widget, WidgetState, WidgetOptions } from './createWidget';\nimport createFormFieldMixin, { FormFieldMixin, FormFieldMixinState, FormFieldMixinOptions } from './mixins/createFormFieldMixin';\n\nexport interface ButtonState extends WidgetState, FormFieldMixinState<string> { }\n\nexport interface ButtonOptions extends WidgetOptions<ButtonState>, FormFieldMixinOptions<any, ButtonState> { }\n\nexport type Button = Widget<ButtonState> & FormFieldMixin<string, ButtonState>;\n\nexport interface ButtonFactory extends ComposeFactory<Button, ButtonOptions> { }\n\nconst createButton: ButtonFactory = createWidget\n\t.mixin({\n\t\tmixin: createFormFieldMixin\n\t})\n\t.extend({\n\t\ttagName: 'button',\n\t\ttype: 'button'\n\t});\n\nexport default createButton;\n"]}