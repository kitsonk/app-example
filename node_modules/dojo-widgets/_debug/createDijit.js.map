{"version":3,"file":"createDijit.js","sourceRoot":"","sources":["createDijit.ts"],"names":[],"mappings":"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","sourcesContent":["import { h, VNode } from 'maquette/maquette';\nimport { ComposeFactory } from 'dojo-compose/compose';\nimport createDestroyable, { Destroyable } from 'dojo-compose/mixins/createDestroyable';\nimport createEvented, { Evented } from 'dojo-compose/mixins/createEvented';\nimport createStateful, { Stateful, State, StatefulOptions } from 'dojo-compose/mixins/createStateful';\nimport Map from 'dojo-core/Map';\nimport Promise from 'dojo-core/Promise';\nimport WeakMap from 'dojo-core/WeakMap';\nimport createRenderable, { Renderable, RenderableOptions } from './mixins/createRenderable';\n\n/**\n * The minimal API that is needed for Dojo 2 widgets to manage Dojo 1 Dijits\n */\nexport interface DijitWidget {\n\t/**\n\t * pointer to original DOM node\n\t */\n\tsrcNodeRef: HTMLElement;\n\n\t/**\n\t * This is our visible representation of the widget! Other DOM\n\t * Nodes may by assigned to other properties, usually through the\n\t * template system's data-dojo-attach-point syntax, but the domNode\n\t * property is the canonical \"top level\" node in widget UI.\n\t */\n\tdomNode: HTMLElement;\n\n\t/**\n\t * Processing after the DOM fragment is added to the document\n\t */\n\tstartup(): void;\n\n\t/**\n\t * Destroy this class, releasing any resources registered via own().\n\t */\n\tdestroy(preserveDom?: boolean): void;\n}\n\n/**\n * The parameters that are passed to the Dijit constructor\n */\nexport interface DijitWidgetParams {\n\t[param: string]: any;\n}\n\n/**\n * A generic constructor for Dijits\n */\nexport interface DijitWidgetConstructor<D extends DijitWidget> {\n\tnew (params: DijitWidgetParams, srcNodeRef: string | Node): D;\n}\n\nexport interface DijitOptions<D extends DijitWidget> extends RenderableOptions, StatefulOptions<DijitState<D>> {\n\t/**\n\t * An object of parameters to pass to the wrapped Dijit constructor\n\t */\n\tparams?: DijitWidgetParams;\n\n\t/**\n\t * The Dijit constructor (or a MID that resolves to the Dijit constructor)\n\t */\n\tCtor?: DijitWidgetConstructor<D> | string;\n}\n\nexport interface DijitState<D extends DijitWidget> extends State {\n\tCtor?: string;\n\tparams?: DijitWidgetParams;\n}\n\nexport interface DijitMixin<D extends DijitWidget> {\n\t/**\n\t * Returns the instantiated Dijit or undefined\n\t *\n\t * TODO: Mark as readonly in TS 2.0\n\t */\n\tdijit: D;\n\n\t/**\n\t * The constructor for the Dijit\n\t *\n\t * TODO: Mark as readonly in TS 2.0\n\t */\n\tCtor: DijitWidgetConstructor<D> | string;\n\n\t/**\n\t * The parameters to pass the Dijit widget constructor\n\t *\n\t * TODO: Mark as readonly in TS 2.0\n\t */\n\tparams: DijitWidgetParams;\n}\n\nexport type Dijit<D extends DijitWidget> = Renderable & Stateful<DijitState<D>> & DijitMixin<D> & Destroyable & Evented;\n\nexport interface DijitFactory extends ComposeFactory<Dijit<DijitWidget>, DijitOptions<DijitWidget>> {\n\t/**\n\t * Create a new instance of a widget which wraps a Dijit\n\t */\n\t<D extends DijitWidget>(options?: DijitOptions<D>): Dijit<D>;\n}\n\n/**\n * Internal function to handle construction of a Dijit\n * @param dijit The instance of the wrapper widget\n * @param srcNodeRef The DOM Node that should be used to pass to the Dijit constructor\n */\nfunction constructDijitWidget(dijit: Dijit<DijitWidget>, srcNodeRef: Node): Promise<DijitWidget> {\n\tconst dijitData = dijitDataWeakMap.get(dijit);\n\treturn resolveCtor(dijitData.Ctor)\n\t\t.then((Ctor) => {\n\t\t\tconst dijitWidget = new Ctor(dijitData.params, srcNodeRef);\n\t\t\tdijitWidget.startup();\n\t\t\treturn dijitWidget;\n\t\t});\n}\n\n/**\n * Internal function that handles the management of the DOM Element when the VNode\n * is added to the flow of the real DOM\n * @param element The DOM Element that is being\n */\nfunction afterCreate(element: HTMLElement) {\n\tconst dijit: Dijit<DijitWidget> = this;\n\tconst dijitData = dijitDataWeakMap.get(dijit);\n\tif (dijitData.dijitWidget) {\n\t\telement.parentNode.insertBefore(dijitData.dijitWidget.domNode, element);\n\t\telement.parentNode.removeChild(element);\n\t}\n\telse {\n\t\tconstructDijitWidget(dijit, element)\n\t\t\t.then((dijitWidget) => {\n\t\t\t\tdijitData.dijitWidget = dijitWidget;\n\t\t\t}, (error) => {\n\t\t\t\tdijit.emit({\n\t\t\t\t\ttype: 'error',\n\t\t\t\t\terror,\n\t\t\t\t\ttarget: dijit\n\t\t\t\t});\n\t\t\t});\n\t}\n}\n\n/**\n * A map of already loaded Ctors\n */\nconst ctorMap = new Map<string, DijitWidgetConstructor<DijitWidget>>();\n\n/**\n * Intrernal function that handles resolving a Dijit widget contructor, including potentially\n * loading the module, if supplied as a string.\n *\n * Returns a `Promise` which resolves with the constructor.\n * @param Ctor The Dijit widget constructor to be resolved\n */\nfunction resolveCtor<D extends DijitWidget>(Ctor: DijitWidgetConstructor<D> | string): Promise<DijitWidgetConstructor<D>> {\n\tif (typeof Ctor !== 'string') {\n\t\treturn Promise.resolve(Ctor);\n\t}\n\telse if (ctorMap.has(Ctor)) {\n\t\treturn Promise.resolve(ctorMap.get(Ctor));\n\t}\n\telse {\n\t\t/* TODO: Should we have a map of already resolved MIDs like the Dojo 1 Parser? */\n\t\treturn new Promise((resolve, reject) => {\n\t\t\tconst handle = require.on('error', (error: any) => {\n\t\t\t\thandle.remove();\n\t\t\t\treject(error);\n\t\t\t});\n\t\t\tconst mid = Ctor;\n\t\t\trequire([ mid ], (Ctor: DijitWidgetConstructor<D>) => {\n\t\t\t\thandle.remove();\n\t\t\t\tif (Ctor && typeof Ctor === 'function') {\n\t\t\t\t\tctorMap.set(mid, Ctor);\n\t\t\t\t\tresolve(Ctor);\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\treject(new Error(`Failed to load constructor from MID: \"${Ctor}\"`));\n\t\t\t\t}\n\t\t\t});\n\t\t});\n\t}\n}\n\n/**\n * Internal data structure for tracking Dijits\n */\ninterface DijitData<D extends DijitWidget> {\n\t/**\n\t * The parameters to be passed to the constructor\n\t */\n\tparams?: DijitWidgetParams;\n\n\t/**\n\t * The instance of the Dijit that was created\n\t */\n\tdijitWidget?: D;\n\n\t/**\n\t * The constructor for the Dijit\n\t */\n\tCtor?: DijitWidgetConstructor<D> | string;\n\n\t/**\n\t * The callback provided to the VDOM to handle when the DOM node is created.\n\t * This is a bound version to the Dijit wrapper.\n\t */\n\tafterCreate?: (element: HTMLElement) => void;\n}\n\n/**\n * A weak map for storing the Dijit data structure\n */\nconst dijitDataWeakMap = new WeakMap<Dijit<DijitWidget>, DijitData<DijitWidget>>();\n\n/**\n * Create a new instance of a Dijit \"wrapper\" which can integrate a Dijit into the Dojo 2\n * widgeting system.\n */\nconst createDijit: DijitFactory = createRenderable\n\t.mixin(createStateful)\n\t.mixin({\n\t\tmixin: <DijitMixin<DijitWidget>> {\n\t\t\trender(): VNode {\n\t\t\t\tconst dijit: Dijit<DijitWidget> = this;\n\t\t\t\tconst afterCreate = dijitDataWeakMap.get(dijit).afterCreate;\n\t\t\t\treturn h(dijit.tagName, { afterCreate });\n\t\t\t},\n\t\t\tget dijit(): DijitWidget {\n\t\t\t\tconst dijit: Dijit<DijitWidget> = this;\n\t\t\t\treturn dijitDataWeakMap.get(dijit).dijitWidget;\n\t\t\t},\n\n\t\t\tget Ctor(): DijitWidgetConstructor<DijitWidget> | string {\n\t\t\t\tconst dijit: Dijit<DijitWidget> = this;\n\t\t\t\treturn dijitDataWeakMap.get(dijit).Ctor;\n\t\t\t},\n\n\t\t\tget params(): DijitWidgetParams {\n\t\t\t\tconst dijit: Dijit<DijitWidget> = this;\n\t\t\t\treturn dijitDataWeakMap.get(dijit).params;\n\t\t\t}\n\t\t},\n\t\tinitialize(instance: Dijit<DijitWidget>, options: DijitOptions<DijitWidget>) {\n\t\t\t/* initialize the constructor */\n\t\t\tconst dijitData: DijitData<DijitWidget> = {};\n\t\t\tdijitDataWeakMap.set(instance, dijitData);\n\n\t\t\t/* create bound version of afterCreate */\n\t\t\tdijitData.afterCreate = afterCreate.bind(instance);\n\t\t\tif (options) {\n\t\t\t\tdijitData.Ctor = options.Ctor;\n\t\t\t\tdijitData.params = options.params || {};\n\t\t\t}\n\t\t}\n\t})\n\t.mixin({\n\t\tmixin: createEvented,\n\t\tinitialize(instance: Dijit<DijitWidget>) {\n\t\t\tinstance.own(instance.on('statechange', (event) => {\n\t\t\t\tconst { Ctor, params } = event.state;\n\t\t\t\tif (Ctor || params) {\n\t\t\t\t\tconst dijitData = dijitDataWeakMap.get(instance);\n\t\t\t\t\tif (!dijitData.dijitWidget) {\n\t\t\t\t\t\tif (Ctor) { /* TODO: same code as above on options */\n\t\t\t\t\t\t\tdijitData.Ctor = Ctor;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (params) {\n\t\t\t\t\t\t\tdijitData.params = params;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}));\n\t\t}\n\t})\n\t.mixin({\n\t\tmixin: createDestroyable,\n\t\tinitialize(instance: Dijit<DijitWidget>) {\n\t\t\tinstance.own({\n\t\t\t\tdestroy() {\n\t\t\t\t\tconst dijitData = dijitDataWeakMap.get(instance);\n\t\t\t\t\tif (dijitData.dijitWidget && dijitData.dijitWidget.destroy) {\n\t\t\t\t\t\t/* TODO: Should we use .destroyRecursive()? */\n\t\t\t\t\t\tdijitData.dijitWidget.destroy();\n\t\t\t\t\t}\n\t\t\t\t\tdijitDataWeakMap.delete(instance);\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t});\n\nexport default createDijit;\n"]}