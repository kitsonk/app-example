(function (factory) {
    if (typeof module === 'object' && typeof module.exports === 'object') {
        var v = factory(require, exports); if (v !== undefined) module.exports = v;
    }
    else if (typeof define === 'function' && define.amd) {
        define(["require", "exports", 'immutable/immutable', 'dojo-compose/compose', 'dojo-compose/mixins/createDestroyable', 'dojo-core/WeakMap', '../util/lang'], factory);
    }
})(function (require, exports) {
    "use strict";
    var immutable_1 = require('immutable/immutable');
    var compose_1 = require('dojo-compose/compose');
    var createDestroyable_1 = require('dojo-compose/mixins/createDestroyable');
    var WeakMap_1 = require('dojo-core/WeakMap');
    var lang_1 = require('../util/lang');
    var childrenMap = new WeakMap_1.default();
    /**
     * A utility function that generates a handle that destroys any children
     */
    function getRemoveHandle(parent, child) {
        function getDestroyHandle(c) {
            var destroyed = false;
            return c.own({
                destroy: function () {
                    if (destroyed) {
                        return;
                    }
                    var children = childrenMap.get(parent);
                    var idx = children.lastIndexOf(c);
                    if (idx > -1) {
                        childrenMap.set(parent, children.delete(idx));
                    }
                    destroyed = true;
                    if (c.parent === parent) {
                        c.parent = undefined;
                    }
                }
            });
        }
        if (Array.isArray(child)) {
            var destroyed_1 = false;
            var handles_1 = child.map(function (c) { return getDestroyHandle(c); });
            return {
                destroy: function () {
                    if (destroyed_1) {
                        return;
                    }
                    handles_1.forEach(function (handle) { return handle.destroy(); });
                    destroyed_1 = true;
                }
            };
        }
        else {
            var handle_1 = getDestroyHandle(child);
            return {
                destroy: function () {
                    handle_1.destroy();
                }
            };
        }
    }
    var createParentMixin = compose_1.default({
        get children() {
            return childrenMap.get(this);
        },
        append: function (child) {
            var parent = this;
            if (Array.isArray(child)) {
                childrenMap.set(parent, childrenMap.get(parent).concat(child));
                child.forEach(function (c) { return c.parent = parent; });
            }
            else {
                childrenMap.set(parent, childrenMap.get(parent).push(child));
                child.parent = parent;
            }
            return getRemoveHandle(parent, child);
        },
        clear: function () {
            var parent = this;
            var children = childrenMap.get(parent);
            if (children) {
                children.forEach(function (child) { child.parent === undefined; });
                childrenMap.set(parent, immutable_1.List());
            }
        },
        insert: function (child, position, reference) {
            var parent = this;
            childrenMap.set(parent, lang_1.insertInList(childrenMap.get(parent), child, position, reference));
            child.parent = parent;
            return getRemoveHandle(parent, child);
        }
    })
        .mixin({
        mixin: createDestroyable_1.default,
        initialize: function (instance, options) {
            childrenMap.set(instance, immutable_1.List());
            if (options && options.children && options.children.length) {
                instance.own(instance.append(options.children));
            }
            instance.own({
                destroy: function () {
                    var children = childrenMap.get(instance);
                    childrenMap.set(instance, immutable_1.List());
                    children.forEach(function (child) { return child.destroy(); });
                }
            });
        }
    });
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.default = createParentMixin;
});
//# sourceMappingURL=../_debug/mixins/createParentMixin.js.map