(function (factory) {
    if (typeof module === 'object' && typeof module.exports === 'object') {
        var v = factory(require, exports); if (v !== undefined) module.exports = v;
    }
    else if (typeof define === 'function' && define.amd) {
        define(["require", "exports", 'dojo-core/aspect', 'dojo-compose/mixins/createEvented'], factory);
    }
})(function (require, exports) {
    "use strict";
    var aspect_1 = require('dojo-core/aspect');
    var createEvented_1 = require('dojo-compose/mixins/createEvented');
    var vnodeEvents = [
        'touchcancel',
        'touchend',
        'touchmove',
        'touchstart',
        'blur',
        'change',
        'click',
        'dblclick',
        'focus',
        'input',
        'keydown',
        'keypress',
        'keyup',
        'load',
        'mousedown',
        'mouseenter',
        'mouseleave',
        'mousemove',
        'mouseout',
        'mouseover',
        'mouseup',
        'mousewheel',
        'scroll',
        'submit'
    ];
    var createVNodeEvented = createEvented_1.default.mixin({
        mixin: {
            listeners: null
        },
        initialize: function (instance) {
            instance.listeners = {};
        },
        aspectAdvice: {
            around: {
                on: function (origFn) {
                    return function (type, listener) {
                        var evented = this;
                        if (vnodeEvents.indexOf(type) > -1) {
                            type = 'on' + type;
                            return aspect_1.on(evented.listeners, type, createEvented_1.resolveListener(listener));
                        }
                        else {
                            return origFn.call(evented, type, listener);
                        }
                    };
                },
                emit: function (origFn) {
                    return function (event) {
                        var evented = this;
                        if (vnodeEvents.indexOf(event.type) > -1) {
                            var method = evented.listeners['on' + event.type];
                            if (method) {
                                method.call(evented, event);
                            }
                        }
                        else {
                            origFn.call(evented, event);
                        }
                    };
                }
            }
        }
    });
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.default = createVNodeEvented;
});
//# sourceMappingURL=../_debug/mixins/createVNodeEvented.js.map