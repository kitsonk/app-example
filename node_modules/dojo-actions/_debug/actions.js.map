{"version":3,"file":"actions.js","sourceRoot":"","sources":["actions.ts"],"names":[],"mappings":";;;;;;;;;IACA,oBAAgB,eAAe,CAAC,CAAA;IAChC,uBAAmB,kBAAkB,CAAC,CAAA;IACtC,wBAAoB,mBAAmB,CAAC,CAAA;IAGxC,IAAM,SAAS,GAAG,IAAI,aAAG,EAA0C,CAAC;IACpE,IAAM,OAAO,GAAG,IAAI,iBAAO,EAA0C,CAAC;IAEtE,gBAA6E,IAAqB;QACjG,MAAM,CAAC,SAAS,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC;IAC5B,CAAC;IAFe,cAAM,SAErB,CAAA;IAED,iBAAwB,MAA6B;QACpD,MAAM,CAAC,OAAO,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC;IAC5B,CAAC;IAFe,eAAO,UAEtB,CAAA;IAED,aAAoB,MAA6B,EAAE,IAAsB;QACxE,IAAM,OAAO,GAAG,OAAO,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC;QACpC,EAAE,CAAC,CAAC,OAAO,IAAI,OAAO,KAAK,IAAI,CAAC,CAAC,CAAC;YACjC,SAAS,CAAC,MAAM,CAAC,OAAO,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC,CAAC;YACtC,OAAO,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC;QACxB,CAAC;QACD,IAAI,CAAC,EAAE,CAAC,CAAC,IAAI,IAAI,SAAS,CAAC,GAAG,CAAC,IAAI,CAAC,IAAI,SAAS,CAAC,GAAG,CAAC,IAAI,CAAC,KAAK,MAAM,CAAC,CAAC,CAAC;YACxE,MAAM,IAAI,SAAS,CAAC,uCAAqC,IAAM,CAAC,CAAC;QAClE,CAAC;QACD,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC;YACX,IAAI,GAAG,gBAAM,EAAE,CAAC;QACjB,CAAC;QACD,EAAE,CAAC,CAAC,OAAO,KAAK,IAAI,CAAC,CAAC,CAAC;YACtB,SAAS,CAAC,GAAG,CAAC,IAAI,EAAE,MAAM,CAAC,CAAC;YAC5B,OAAO,CAAC,GAAG,CAAC,MAAM,EAAE,IAAI,CAAC,CAAC;QAC3B,CAAC;QACD,MAAM,CAAC;YACN,OAAO;gBACN,EAAE,CAAC,CAAC,OAAO,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC;oBACzB,SAAS,CAAC,MAAM,CAAC,OAAO,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC,CAAC;oBACtC,OAAO,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC;gBACxB,CAAC;YACF,CAAC;SACD,CAAC;IACH,CAAC;IAxBe,WAAG,MAwBlB,CAAA","sourcesContent":["import { Handle } from 'dojo-core/interfaces';\nimport Map from 'dojo-core/Map';\nimport Symbol from 'dojo-core/Symbol';\nimport WeakMap from 'dojo-core/WeakMap';\nimport { Action, ActionOptions, ActionState } from './createAction';\n\nconst actionMap = new Map<string | symbol, Action<any, any, any>>();\nconst typeMap = new WeakMap<Action<any, any, any>, string | symbol>();\n\nexport function byType<T, O extends ActionOptions<T>, S extends ActionState>(type: string | symbol): Action<T, O, S> {\n\treturn actionMap.get(type);\n}\n\nexport function getType(action: Action<any, any, any>): string | symbol {\n\treturn typeMap.get(action);\n}\n\nexport function add(action: Action<any, any, any>, type?: string | symbol): Handle {\n\tconst oldtype = typeMap.get(action);\n\tif (oldtype && oldtype !== type) {\n\t\tactionMap.delete(typeMap.get(action));\n\t\ttypeMap.delete(action);\n\t}\n\telse if (type && actionMap.has(type) && actionMap.get(type) !== action) {\n\t\tthrow new TypeError(`Cannot add duplicate action type: ${type}`);\n\t}\n\tif (!type) {\n\t\ttype = Symbol();\n\t}\n\tif (oldtype !== type) {\n\t\tactionMap.set(type, action);\n\t\ttypeMap.set(action, type);\n\t}\n\treturn {\n\t\tdestroy() {\n\t\t\tif (typeMap.has(action)) {\n\t\t\t\tactionMap.delete(typeMap.get(action));\n\t\t\t\ttypeMap.delete(action);\n\t\t\t}\n\t\t}\n\t};\n}\n"]}